using namespace std;

// Node structure for the linked list
struct Node {
    int row, col, value;
    Node* next;
};

// Sparse Matrix class
class SparseMatrix {
private:
    int rows, cols;
    Node* head;

public:
    // Constructor
    SparseMatrix(int rows, int cols) {
        this->rows = rows;
        this->cols = cols;
        head = nullptr;
    }

    // Function to insert a new node into the linked list
    void insert(int row, int col, int value) {
        Node* newNode = new Node;
        newNode->row = row;
        newNode->col = col;
        newNode->value = value;
        newNode->next = nullptr;

        // If the list is empty, set the new node as the head
        if (!head) {
            head = newNode;
            return;
        }

        // Find the appropriate position to insert the new node
        Node* current = head;
        Node* prev = nullptr;
        while (current && (current->row < row || (current->row == row && current->col < col))) {
            prev = current;
            current = current->next;
        }

        // Insert the new node
        if (!prev) {
            newNode->next = head;
            head = newNode;
        } else {
            newNode->next = current;
            prev->next = newNode;
        }
    }

    // Function to display the sparse matrix
    void display() {
        Node* current = head;
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (current && current->row == i && current->col == j) {
                    cout << current->value << " ";
                    current = current->next;
                } else {
                    cout << "0 ";
                }
            }
            cout << endl;
        }
    }
};

int main() {
    // Example usage
    SparseMatrix sparseMatrix(4, 4);

    sparseMatrix.insert(0, 1, 3);
    sparseMatrix.insert(1, 2, 7);
    sparseMatrix.insert(2, 3, 9);
    sparseMatrix.insert(3, 1, 5);

    cout << "Sparse Matrix:" << endl;
    sparseMatrix.display();
